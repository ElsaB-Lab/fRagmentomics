% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_motif_ggseqlogo.R
\name{plot_qqseqlogo_meme}
\alias{plot_qqseqlogo_meme}
\title{Plot sequence motif composition}
\usage{
plot_qqseqlogo_meme(
  df_fragments,
  end_motif_5p = "Fragment_Bases_5p",
  end_motif_3p = "Fragment_Bases_3p",
  motif_type = "Both",
  motif_size = 3,
  col_z = "Fragment_Status_Simple",
  vals_z = NULL,
  colors_z = NULL,
  sample_id = NA,
  output_path = NA,
  ggsave_params = list()
)
}
\arguments{
\item{df_fragments}{The input dataframe containing fragment sequence data.}

\item{end_motif_5p}{Character string. The column name for 5' end sequences.}

\item{end_motif_3p}{Character string. The column name for 3' end sequences.}

\item{motif_type}{Character string. Which ends to analyze: 'Start', 'End', or 'Both'.}

\item{motif_size}{A single integer specifying the length of the motif.}

\item{col_z}{Character string. The column name for grouping/faceting. If NULL, no grouping is applied.}

\item{vals_z}{A character vector of group names to include. If NULL, all groups in 'col_z' are used.}

\item{colors_z}{The color scheme for nucleotides. Can be NULL (default ggseqlogo colors), a character string naming
an RColorBrewer palette (e.g., "Dark2"), or a named character vector (e.g., c("A"="blue", "C"="red", ...)).}

\item{sample_id}{Sample identifier.}

\item{output_path}{Character vector for the plot output path.}

\item{ggsave_params}{A named list of arguments to be passed to 'ggplot2::ggsave()'. For example,
'list(width = 8, height = 6, units = "in", dpi = 300, bg = "white")'. If not provided, sensible defaults will be used.}
}
\value{
A 'ggplot' object.
}
\description{
Creates a sequence logo plot showing the proportion of each nucleotide at each specified position, with flexible
grouping and faceting.
}
\examples{
## --- Create a dataset for demonstration ---
# Set a seed for reproducibility
set.seed(42)

# Helper function to generate random DNA sequences with a bias
generate_biased_dna <- function(n_seq, len, prob) {
    bases <- c("A", "C", "G", "T")
    replicate(n_seq, paste(sample(bases, len, replace = TRUE, prob = prob), collapse = ""))
}

# Create 50 "MUT" fragments with a high proportion of 'C' at the ends
df_mut <- data.frame(
    Fragment_Bases_5p = generate_biased_dna(50, 10, prob = c(0.2, 0.5, 0.15, 0.15)),
    Fragment_Bases_3p = generate_biased_dna(50, 10, prob = c(0.2, 0.5, 0.15, 0.15)),
    Fragment_Status_Simple = "MUT"
)

# Create 50 "WT" fragments with a high proportion of 'G' at the ends
df_wt <- data.frame(
    Fragment_Bases_5p = generate_biased_dna(50, 10, prob = c(0.15, 0.15, 0.5, 0.2)),
    Fragment_Bases_3p = generate_biased_dna(50, 10, prob = c(0.15, 0.15, 0.5, 0.2)),
    Fragment_Status_Simple = "WT"
)

# Combine into a single dataframe
example_df <- rbind(df_mut, df_wt)

## --- Function Calls ---

# 1. Default plot: Shows a 3-base motif from both 5' and 3' ends,
#    separated by a dash, for each group ("MUT" and "WT").
p1 <- plot_qqseqlogo_meme(example_df)
print(p1)

# 2. Analyze a longer, single-end motif: Shows a 5-base motif
#    from only the 5' end ('motif_type = "Start"').
p2 <- plot_qqseqlogo_meme(
    df_fragments = example_df,
    motif_type = "Start",
    motif_size = 5
)
print(p2)

# 3. Customizing colors: Use a named RColorBrewer palette.
#    Note the separator "-" is not a nucleotide and won't be colored.
p3 <- plot_qqseqlogo_meme(
    df_fragments = example_df,
    colors_z = "Set1"
)
print(p3)

# You can also provide a named vector for full control over colors.
custom_cols <- c("A" = "#1B9E77", "C" = "#D95F02", "G" = "#7570B3", "T" = "#E7298A")
p4 <- plot_qqseqlogo_meme(
    df_fragments = example_df,
    motif_type = "Start",
    colors_z = custom_cols
)
print(p4)

# 4. Ungrouped plot: Analyzes all fragments together as a single group.
p5 <- plot_qqseqlogo_meme(example_df, col_z = NULL)
print(p5)

# 5. Save plot with default settings.
# plot_qqseqlogo_meme(
#   df_fragments = example_df,
#   sample_id = "test01_motif",
#   output_path = "test01_motif_plot.png"
# )

# 6. Save plot with custom dimensions.
# plot_qqseqlogo_meme(
#   df_fragments = example_df,
#   sample_id = "test02_motif_custom",
#   output_path = "test02_motif_custom_plot.png",
#   ggsave_params = list(width = 15, height = 10, units = "cm")
# )

}
