% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_fRagmentomics.R
\name{run_fRagmentomics}
\alias{run_fRagmentomics}
\title{Analyze fragments}
\usage{
run_fRagmentomics(
  mut,
  bam,
  fasta,
  sample_id = NA_character_,
  neg_offset_mate_search = -1000,
  pos_offset_mate_search = 1000,
  one_based = TRUE,
  flag_bam_list = list(isPaired = TRUE, isProperPair = NA, isUnmappedQuery = FALSE,
    hasUnmappedMate = NA, isMinusStrand = NA, isMateMinusStrand = NA, isFirstMateRead =
    NA, isSecondMateRead = NA, isSecondaryAlignment = FALSE, isSupplementaryAlignment =
    FALSE, isNotPassingQualityControls = NA, isDuplicate = FALSE),
  report_tlen = FALSE,
  report_softclip = FALSE,
  report_5p_3p_bases_fragment = 5,
  remove_softclip = FALSE,
  retain_fail_qc = FALSE,
  tmp_folder = tempdir(),
  output_path = NA_character_,
  n_cores = 8
)
}
\arguments{
\item{mut}{Path to a .vcf or .tsv file or string representation chr:pos:ref:alt of a mutation.}

\item{bam}{Path to a BAM file.}

\item{fasta}{Path to the FASTA file for the reference sequence used for generating the BAM file.}

\item{sample_id}{Sample identifier.}

\item{neg_offset_mate_search}{Integer. Use in read_bam.
Represents the number of nucleotides to extend upstream (negative direction)
from the position of interest when querying the BAM file with Rsamtools.
his extension ensures that paired reads are retrieved, even if only one mate
overlaps the queried position.}

\item{pos_offset_mate_search}{Integer. Use in read_bam.}

\item{one_based}{Boolean. TRUE if fasta is in one based. False if in 0 based.}

\item{flag_bam_list}{A named list of logicals for filtering reads based on their SAM flag
NA = Filter is ignored, TRUE = The read MUST have this flag, FALSE = The read MUST NOT have this flag.}

\item{report_tlen}{Boolean. Whether to include the TLEN (template length)
information in the output.}

\item{report_softclip}{Boolean. Whether to include the number of soft-clipped
bases at the fragment extremities in the output.}

\item{report_5p_3p_bases_fragment}{Integer. Whether to include N fragment
extremity bases in the output.}

\item{remove_softclip}{Boolean. If set to TRUE, trim soft-clipped bases from the 5' end of Read 5p and from the 3' end of Read 3p.}

\item{retain_fail_qc}{Boolean. If set to TRUE, retain fragments that failed the various quality checks in the output.}

\item{tmp_folder}{Character vector for the temporary folder path.}

\item{output_path}{Character vector for the fragmentomics table output path.}

\item{n_cores}{Number of cores for parallel computation.}
}
\value{
A dataframe containing extracted fragment-level information.
}
\description{
This is the main function of the package. It provides an end-to-end pipeline for analyzing the allelic state of
individual DNA fragments covering specific genomic variants. It takes a list of mutations and an aligned sequencing
file (BAM) as input, processes each fragment in parallel, and returns a detailed data frame of results.
}
\details{
The function executes a multi-step workflow for each variant provided in the
'mut' input:
\enumerate{
\item \strong{Input Validation}: All parameters are rigorously checked for correctness (e.g., file existence, data types).
Required file indices ('.bai', '.fai') are created automatically if missing.
\item \strong{Variant Normalization}: The input variants are parsed and normalized into a canonical, left-aligned
representation using a combination of VCF-style indel padding and the external 'bcftools norm' command.
\item \strong{BAM Read Extraction}: For each normalized variant, the function efficiently queries the BAM file to
retrieve all read pairs that cover the genomic locus.
\item \strong{Parallel Fragment Processing}: The core analysis is performed in parallel using the 'future' framework.
Each unique DNA fragment is processed by the 'extract_fragment_features' worker function to determine
its size, quality metrics, and mutation status (e.g., "MUT", "WT", "AMB", "N/I").
\item \strong{VAF Calculation}: After all fragments for a variant are processed, the Variant Allele Frequency (VAF) is calculated.
\item \strong{Output Generation}: Results from all variants are aggregated into a single data frame. If a value for
\code{output_path} is provided, this data frame is also written to a tab-separated file.
}
}
\examples{
# --- 1. Locate Example Files ---
# The package includes small example files to demonstrate its functionality.
# We locate them using system.file().
mut_file <- system.file(
  "extdata", "mutations_cfdna-test-01_chr1_27433000_27435000.tsv",
  package = "fRagmentomics"
)
bam_file <- system.file(
  "extdata", "cfdna-test-01_chr1_27433000_27435000.bam",
  package = "fRagmentomics"
)
fasta_file <- system.file(
  "extdata", "hg19_chr1_27433000_27435000.fa",
  package = "fRagmentomics"
)

# --- 2. Run the Analysis ---
# This single call runs the full analysis pipeline on the example data.
# The output file is written to a temporary location to avoid cluttering
# the working directory. We use n_cores = 1L for examples.
results <- run_fRagmentomics(
  mut = mut_file,
  bam = bam_file,
  fasta = fasta_file,
  sample_id = "cfdna-test-01",
  output_path = "cfdna-test-01_fragmentomics.tsv",
  n_cores = 1L
)

# --- 3. View the Results ---
# Print the first few rows of the output data frame to see the results.
print(head(results))

}
