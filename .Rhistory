if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("Rsamtools")
q()
BiocManager::install("Rsamtools")
# Installer microbenchmark
install.packages("microbenchmark")
# Installer ggplot2 pour visualiser les r√©sultats (si non install√©)
install.packages("ggplot2")
# Installer microbenchmark
install.packages("microbenchmark")
install.packages("microbenchmark")
options(repos = c(CRAN = "https://cran.r-project.org"))
install.packages("microbenchmark")
install.packages("ggplot2")
library(Rsamtools)
library(microbenchmark)
bam_file <- "/mnt/beegfs/scratch/k_maudet/projects/ElsaBLab_cfDNA_Origin/code/pipeline/results/data/bam/ORD-1330705-01.bam"
pos      <- 123456
chr      <- "chr1"
pos_l    <- pos - 1000
pos_r    <- pos + 1000
flag_keep   <- 0x03    # Flags √† conserver (exemple)
flag_remove <- 0x900
flag_keep_str <- sprintf("0x%X", flag_keep)
flag_remove_str <- sprintf("0x%X", flag_remove)
# üõ†Ô∏è 1. Test avec system2() (Appel direct √† samtools)
benchmark_system2 <- function() {
  cmd <- sprintf(
    "samtools view -b %s %s:%d-%d | samtools view -f %s -F %s - | cut -f1-11",
    bam_file, chr, pos_l, pos_r, flag_keep_str, flag_remove_str
  )
  
  # Ex√©cuter la commande et capturer la sortie
  system(cmd, intern = TRUE)
}
# üõ†Ô∏è 2. Test avec Rsamtools
benchmark_rsamtools <- function() {
  param <- ScanBamParam(
    which = GRanges(chr, IRanges(pos_l, pos_r)),
    flag  = scanBamFlag(isProperPair = as.logical(bitwAnd(flag_keep, 0x2) != 0),
                        isUnmappedQuery = if (bitwAnd(flag_remove, 0x4) != 0) FALSE else NA),
    what  = c("qname", "flag", "rname", "pos", "mapq",
              "cigar", "mrnm", "mpos", "isize", "seq", "qual")
  )
  
  bam_list <- scanBam(BamFile(bam_file), param = param)
  as.data.frame(bam_list[[1]], stringsAsFactors = FALSE)
}
# üî• Lancer le benchmark (5 r√©p√©titions pour comparer)
res <- microbenchmark(
  system2 = benchmark_system2(),
  Rsamtools = benchmark_rsamtools(),
  times = 5
)
# üìä R√©sultats
print(res)
# üìà Visualiser les performances
library(ggplot2)
ggplot(res, aes(x = expr, y = time / 1e9)) +
  geom_boxplot() +
  labs(title = "Comparaison des temps d'ex√©cution",
       x = "M√©thode",
       y = "Temps (secondes)") +
  theme_minimal()
q()
flag_keep   <- 0x03    # Flags √† conserver (exemple)
flag_remove <- 0x900   # Flags √† exclure (exemple)
# üìå Conversion des flags en format "0xHEX" pour samtools
flag_keep_str <- sprintf("0x%X", flag_keep)
flag_remove_str <- sprintf("0x%X", flag_remove)
# üõ†Ô∏è 1. Test avec system2() (Appel direct √† samtools)
benchmark_system2 <- function() {
  cmd <- sprintf(
    "samtools view -b %s %s:%d-%d | samtools view -f %s -F %s - | cut -f1-11",
    bam_file, chr, pos_l, pos_r, flag_keep_str, flag_remove_str
  )
  
  # Ex√©cuter la commande et capturer la sortie
  system(cmd, intern = TRUE)
}
# üõ†Ô∏è 2. Test avec Rsamtools
benchmark_rsamtools <- function() {
  param <- ScanBamParam(
    which = GRanges(chr, IRanges(pos_l, pos_r)),
    flag  = scanBamFlag(isProperPair = as.logical(bitwAnd(flag_keep, 0x2) != 0),
                        isUnmappedQuery = if (bitwAnd(flag_remove, 0x4) != 0) FALSE else NA),
    what  = c("qname", "flag", "rname", "pos", "mapq",
              "cigar", "mrnm", "mpos", "isize", "seq", "qual")
  )
  
  bam_list <- scanBam(BamFile(bam_file), param = param)
  as.data.frame(bam_list[[1]], stringsAsFactors = FALSE)
}
# üî• Lancer le benchmark (5 r√©p√©titions pour comparer)
res <- microbenchmark(
  system2 = benchmark_system2(),
  Rsamtools = benchmark_rsamtools(),
  times = 5
)
# üìä R√©sultats
print(res)
# üìà Visualiser les performances
library(ggplot2)
ggplot(res, aes(x = expr, y = time / 1e9)) +
  geom_boxplot() +
  labs(title = "Comparaison des temps d'ex√©cution",
       x = "M√©thode",
       y = "Temps (secondes)") +
  theme_minimal()
chr
flag_keep_str 
benchmark_system2 <- function() {
  cmd <- sprintf(
    "samtools view -b %s %s:%d-%d | samtools view -f %s -F %s - | cut -f1-11",
    bam_file, chr, pos_l, pos_r, flag_keep_str, flag_remove_str
  )
  
  # Ex√©cuter la commande et capturer la sortie
  system(cmd, intern = TRUE)
}
benchmark_rsamtools <- function() {
  param <- ScanBamParam(
    which = GRanges(chr, IRanges(pos_l, pos_r)),
    flag  = scanBamFlag(isProperPair = as.logical(bitwAnd(flag_keep, 0x2) != 0),
                        isUnmappedQuery = if (bitwAnd(flag_remove, 0x4) != 0) FALSE else NA),
    what  = c("qname", "flag", "rname", "pos", "mapq",
              "cigar", "mrnm", "mpos", "isize", "seq", "qual")
  )
  
  bam_list <- scanBam(BamFile(bam_file), param = param)
  as.data.frame(bam_list[[1]], stringsAsFactors = FALSE)
}
res <- microbenchmark(
  system2 = benchmark_system2(),
  Rsamtools = benchmark_rsamtools(),
  times = 15
)
library(microbenchmark)
install.packages("microbenchmark")
res <- microbenchmark(
  system2 = benchmark_system2(),
  Rsamtools = benchmark_rsamtools(),
  times = 15
)
library(Rsamtools)
res <- microbenchmark(
  system2 = benchmark_system2(),
  Rsamtools = benchmark_rsamtools(),
  times = 15
)
# üìä R√©sultats
print(res)
q()
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
getwd()
getwd()
file.exists("R/prepro-read-mut.R")
testthat::test_dir("tests/testthat/")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
testthat::test_package("fRagmentomics")
testthat::test_dir("tests/testthat/")
library(readr)
find("read_tsv")
"readr" %in% rownames(installed.packages())
testthat::test_dir("tests/testthat/")
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
> file.exists("R/prepro-read-mut.R")
[1] TRUE
file.exists("R/prepro-read-mut.R")
[1] TRUE
file.exists("R/prepro-read-mut.R")
[1] TRUE
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
file.exists("R/prepro-read-mut.R")
[1] TRUE
find("read_mut")
getAnywhere(read_mut)
devtools::document()
file.exists("R/prepro-read-mut.R")
[1] TRUE
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
testthat::test_file("R/test-prepro-read-mut.R")
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
testthat::test_file("tests/testthat/test-prepro-read-mut.R")
clear
q()
devtools::document()
testthat::test_file("tests/testthat/test-read_mut.R")
devtools::document()
testthat::test_file("tests/testthat/test-read_mut.R")
testthat::test_file("tests/testthat/test-read_mut.R")
devtools::document()
testthat::test_file("tests/testthat/test-read_mut.R")
devtools::document()
devtools::document()
testthat::test_file("tests/testthat/test-read_mut.R")
testthat::local_edition(3)
testthat::test_file("tests/testthat/test-read_mut.R")
devtools::document()
testthat::test_file("tests/testthat/test-read_mut.R")
setwd(/mnt/beegfs/scratch/k_maudet/projects/ElsaBLab_fRagmentomics/R/)
setwd(mnt/beegfs/scratch/k_maudet/projects/ElsaBLab_fRagmentomics/R/)
q()
q()
c
devtools::document()
devtools::document()
devtools::document()
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf.R")
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
q()
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
q()
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
devtools::document()
testthat::test_file("tests/testthat/test-normalize_user_rep_to_vcf_rep.R")
testthat::test_file("tests/testthat/test-read_mut.R")
testthat::test_file("tests/testthat/test-check_input.R")
q()
