name: Conda build & upload (multi-OS)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      label:
        description: "Anaconda label (dev/main)"
        required: true
        default: "main"

jobs:
  build-and-upload:
    name: Build & Upload (${{ matrix.subdir }})
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_fail || false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            subdir: linux-64
          - os: macos-13
            subdir: osx-64
          - os: macos-14
            subdir: osx-arm64
          - os: windows-latest
            subdir: win-64
            allow_fail: true

    env:
      RECIPE_DIR: conda-recipe          
      LABEL: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && 'main' || github.event.inputs.label }}
      ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniforge (conda + mamba)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge,bioconda
          channel-priority: strict
          auto-update-conda: true

      - name: Show conda info
        shell: bash -l {0}
        run: |
          conda info
          conda config --show
          ls -la "$RECIPE_DIR"

      - name: Install build tools
        shell: bash -l {0}
        run: |
          mamba install -y conda-build anaconda-client boa conda-verify

      - name: Compute output path
        id: out
        shell: bash -l {0}
        run: |
          PKG_PATH=$(conda build "$RECIPE_DIR" -c conda-forge -c bioconda --output)
          echo "pkg_path=$PKG_PATH" >> "$GITHUB_OUTPUT"
          echo "Will build: $PKG_PATH"

      - name: Build recipe
        shell: bash -l {0}
        run: |
          conda build "$RECIPE_DIR" -c conda-forge -c bioconda
          ls -lah $CONDA_PREFIX/conda-bld/*/*r-fragmentomics*.conda || true

      - name: Upload to Anaconda (elsab-lab)
        if: env.ANACONDA_API_TOKEN != ''
        shell: bash -l {0}
        run: |
          PKG="${{ steps.out.outputs.pkg_path }}"
          echo "Uploading $PKG with label: $LABEL"
          anaconda -t "$ANACONDA_API_TOKEN" upload -u elsab-lab -l "$LABEL" --skip-existing "$PKG"

      - name: Test user install from channel
        shell: bash -l {0}
        run: |
          mamba create -n frag-test -y
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate frag-test
          mamba install -y -c elsab-lab -c conda-forge -c bioconda r-fragmentomics
          R -q -e "library(fRagmentomics); packageVersion('fRagmentomics')"
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            if command -v bcftools >/dev/null 2>&1; then bcftools --version; fi
          fi
